---
# Source: elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: my-elasticsearch
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVHakNDQXdLZ0F3SUJBZ0lVRUpMR2p2dUtwdDBkRm9NWlB6ZS9Ecnphek1Zd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2F6RUxNQWtHQTFVRUJoTUNWVk14RWpBUUJnTlZCQWdNQ1ZsdmRYSlRkR0YwWlRFUk1BOEdBMVVFQnd3SQpXVzkxY2tOcGRIa3hFREFPQmdOVkJBb01CMWx2ZFhKUGNtY3hFVEFQQmdOVkJBc01DRmx2ZFhKRVpYQjBNUkF3CkRnWURWUVFEREFkNWIzVnlMV05oTUI0WERUSTFNRGt4TnpJd01qUXpOVm9YRFRJMk1Ea3hOekl3TWpRek5Wb3cKZURFTE1Ba0dBMVVFQmhNQ1ZWTXhFakFRQmdOVkJBZ01DVmx2ZFhKVGRHRjBaVEVSTUE4R0ExVUVCd3dJV1c5MQpja05wZEhreEVEQU9CZ05WQkFvTUIxbHZkWEpQY21jeEVUQVBCZ05WQkFzTUNGbHZkWEpFWlhCME1SMHdHd1lEClZRUUREQlJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxzK2xuZXVST0dDUnRibEUreFZmL2xsaFI0Nld4VFRJSEJpdjBkQ1dQVTR5bDRwNEl1NQptTEkxa09TdmhtY3lBYmRGeXd2ZXVmczlwck9qdDFZUnllMWxTcjFYUVM1Z0xOSUtvMGJYWkVGRWVJbEd3UTNnClkzcWl6Sjd5cVRNTFJJVzVJc3ZENVk2TUpFUWkyN1ZhVHdGZEFoQitIcjQvVHJ1RURKTGE5YU9nN1c1SnM5Mk4KWWtrelBEdDdVdUlndWdDVFBDOEtyNXMwWk1RRXJwYzc3aXdaSUFFVDJld2lGN0ZPeGJ4VUdLc0E1emZwdmtHOQpFRWdrcVZhL1hsdzhKVW9KVUw3TEM3T2dRRXJVYXdac3FUWmFFN0lIREVkSkgyWlJNUjlDdFo2TVkyUEllL2ZWCkdwOFBHSjlLK0tqWENCOUxqS2cxTVJpRjJSSWJHMDNIeHQwQ0F3RUFBYU9CcURDQnBUQkVCZ05WSFJFRVBUQTcKZ2hSbGJHRnpkR2xqYzJWaGNtTm9MVzFoYzNSbGNvSWRaV3hoYzNScFkzTmxZWEpqYUMxdFlYTjBaWEl0YUdWaApaR3hsYzNPSEJIOEFBQUV3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01CMEdBMVVkCkRnUVdCQlFuaDlnUHQzWHBMMWlLYXdJR3VaWmVOZG1zbXpBZkJnTlZIU01FR0RBV2dCUnVjbytqZWtFZ3AyQlMKc0lxb29yemwzM1RXTXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWZ3dnpaZDM3a0R2a201THFsODcrL1ZqUApTRDZpaXd5UWJrUzdHMHZhaENHK0Ird3h3U1graUFXVnd2SzlJMXZnWCtXaGZZY3h5cDh5RHc2aDVmVEo2L081CllvNkRjbmlSWm9sNzRXRFlKbVMwUU90NG83QUVNOTU0S1M4WWgrQWRMcVF4Z09QV3JoeWdmalZ4Z3VCbVJRaVkKM3g4WkdCc25aRHNaRHkvNnFJR1NPcXNDQlBCTlF6Y1VyVVZlOG9aOUJnVVNEZnNicUEydFlnQkduenZ3TTdzbwpyYkhhZFF5TzVwby9UTU1uNzMxdWloY1FNVGxZYVAvNUd6bGppWEs3czhBMzVSWGdLL1RQWTJwVzRRbk9FT0RICktudmh2TjVDQjVPNVBxb0Z6MDg2djEwY1RJVjNRUGlqdXFWbWRnSWZLSTV4SXdMelVManY4ditYWi8rZ2lBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzdQcFozcmtUaGdrYlcKNVJQc1ZYLzVaWVVlT2xzVTB5QndZcjlIUWxqMU9NcGVLZUNMdVppeU5aRGtyNFpuTWdHM1Jjc0wzcm43UGFhegpvN2RXRWNudFpVcTlWMEV1WUN6U0NxTkcxMlJCUkhpSlJzRU40R042b3N5ZThxa3pDMFNGdVNMTHcrV09qQ1JFCkl0dTFXazhCWFFJUWZoNitQMDY3aEF5UzJ2V2pvTzF1U2JQZGpXSkpNenc3ZTFMaUlMb0Frend2Q3ErYk5HVEUKQks2WE8rNHNHU0FCRTluc0loZXhUc1c4VkJpckFPYzM2YjVCdlJCSUpLbFd2MTVjUENWS0NWQyt5d3V6b0VCSwoxR3NHYktrMldoT3lCd3hIU1I5bVVURWZRcldlakdOanlIdjMxUnFmRHhpZlN2aW8xd2dmUzR5b05URVloZGtTCkd4dE54OGJkQWdNQkFBRUNnZ0VBSU1QVytLSmFFMHdFc1Yzc21wSnJqbXloV3FURGcyVmVhOHdieEpCcm1KMlQKYTk3UUdDTW1BU2syYlkzNWF0MXBSM1RERHhTdVhyUnZFMGcyc0t6ME5NSmd6YmtUQXRaNWdWZXpNcFpHU05WKwpjaWNiYVI0MnlpTHF3M1dhL2YrZXdmZWZpeUNBYnUwKysxMU9MUEhjbVZSNUpBR3R4NFMwZGtPcEg1bUpHbFNsClBHMDNyZFowZUFnV2JqRUVDUnZXTXlzWjBzNGdpSVZ1Zm1MME1QR056TTkyamtNUWg1aWI1LzgzN1VsZXJySWEKbEI0VmFjWFVJMlBNZ0NjK3BvN09PM0ZVSWZGOFphc3ROdkRjRmJLUGV0dldBNTk3QmdRbkU1Ykp2cVhFU3ZqbwozUXhWbzJYdk9JL1d5Mk85THhBaDRuaXFJNUdHc25taENsdkhrZWdZZ1FLQmdRRCtPeHdCZUJ1dWYvSEVUbXRDCkZEWnk4bWdnTzdUMml0OHFseU55bkZ0ZmpiOXpYUHJCbEJsVW1GRzhJUzN4S0FKbzZ1WlFZUGZXOTFRTWZCUUoKSWl2TTBOZ0ZLUmRjODF0M3BaK2FxcmRCajgzNElWRG1zMVhNZnBLSVBObHM1MWxRMkEvR3cxVnI3YXJPcGsvVAo1Mmd2dTFNQmNVaG4yaWlrQXlpQ1h3TllHUUtCZ1FDOGpDWFdPVEp1bm1JWUozallQREdNUjJBZ1gyRVQ1MlN5ClhjZU15cDdkeEluKzF5TUlrYkQvelhlTU9waHkzMlRMSWJFb084YWNJbmxKb3BtQVVJaHM5ZHFhTFkwbFFxVDUKNHlEc2JaamsvQnF2K3daY2RZVXoxbUZvdmFKR3BUbVlMQkFuYWxueFZwcFRMOWJKK1BGMVRzQjBjSjF4dk10UQpwbDVVYUhyTlpRS0JnQldLaXAveFBsODF4aFY5RTRlQTBQQkNhK0kzVE9rSzhVZlprSTVZZzBHQWNEVmxMbllTCmgyYnNsUmhjczFqWXJBT1p5N1FKMDFZcWxMdU9FK0NHUGJIWURFVzdxcGdjb3FacnFTOWd3YkJUYi85VFMxaVEKMzNjNVRrOHU0TGxpak9YVnVOaDltcEpQakFhQWZ3a1VkWFo5NTlXYWRLa2dDZ3VEblA0VzhPQ1pBb0dBVHhMRApwNFVUVm5zTURxODNLaENNZ3hWSUJpdWFEZnZrS2ozVU80S2FmODAyUm04NVhSV2swcEw4Q1E1bDh2OG5TVjJXCjY1V3VKTHI4Zk5vNVlDdm1HelE4ZXA2UjdFZDM0dWpUWFBSVncrckswblVIWk8xUWNMMysyaXQxakFVdEUxbWYKYUxoY2dpOWN4M2h2cndLOVdRSXZDbVpVVVdmcEtLaXROTjhnYVZVQ2dZRUFuU21MSlM3M2hsME5FT2NjZ1pnagpnTEs4dlVKRTNqT3NLTmZURXh4LzQ3NlVEcmphaXFJQ0dEcUhBbit5M0JQMHdBQUpTRUJwNlE4S2JjWWpXLzNyCjI1TUp1a1hZajdiWTJhQmNvaURzK0puL0NHaDdWc3lyWXBtOWVsTk1pY1ZDTlJ0SFBuZ3VtN3p5ZU84cGZLaFMKaDhEdGYrR1A1b051RE1SVU5xNlVoTWM9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0ekNDQXArZ0F3SUJBZ0lVRFM4Yk9NRDJOd3RNNlJJYm92YUlMN0Q4d1JJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2F6RUxNQWtHQTFVRUJoTUNWVk14RWpBUUJnTlZCQWdNQ1ZsdmRYSlRkR0YwWlRFUk1BOEdBMVVFQnd3SQpXVzkxY2tOcGRIa3hFREFPQmdOVkJBb01CMWx2ZFhKUGNtY3hFVEFQQmdOVkJBc01DRmx2ZFhKRVpYQjBNUkF3CkRnWURWUVFEREFkNWIzVnlMV05oTUI0WERUSTFNRGt4TnpJd01qTXdObG9YRFRNMU1Ea3hOVEl3TWpNd05sb3cKYXpFTE1Ba0dBMVVFQmhNQ1ZWTXhFakFRQmdOVkJBZ01DVmx2ZFhKVGRHRjBaVEVSTUE4R0ExVUVCd3dJV1c5MQpja05wZEhreEVEQU9CZ05WQkFvTUIxbHZkWEpQY21jeEVUQVBCZ05WQkFzTUNGbHZkWEpFWlhCME1SQXdEZ1lEClZRUUREQWQ1YjNWeUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTcwb3kKZkUxOHhnRDRqWHoxaW9JNjROM1ozTjlpOVE3cko0L2syRVY4R3pNMnFkN0k1V0FWbE9OZ1pPZTc1amhwNUNxcAprZ0habHBNSXBxbmJmdGdKOWFhcjRCVWQwZldqQVNYanJpNFFXOTNET1pmRUQ3VkpLVFdUSi9McmdPV3lPSUxPCldRdXBpc0hIcjB5ZjBKdTZGUU45Ylp2WGJnUi8wTCtMOEZHM1k1M2tJbzYyZVphOW00RTBvOWhZV0g4VWVBUHcKczE1ZkhaTUdSeklBc3JLKzNLT0RjVmVTakVvUlhRWmgyU0FkKy9FajdCbTk0Zk02VmtGNXgzNy9FVCtEa1FFSgpBOVR5cm5pSldGdldOTW5nMTNNYVg0RTdZUTBVZHVUdGtwc0lMUExhQXFCZTF5aDJVTnhsUzVyTXJ6NUFHYWxRCmdlKzlMUExXUXZIZ2E5Wk5Gd0lEQVFBQm8xTXdVVEFkQmdOVkhRNEVGZ1FVYm5LUG8zcEJJS2RnVXJDS3FLSzgKNWQ5MDFqTXdId1lEVlIwakJCZ3dGb0FVYm5LUG8zcEJJS2RnVXJDS3FLSzg1ZDkwMWpNd0R3WURWUjBUQVFILwpCQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFZMnF6V2dPL0lNRS85dFlBZ3NldG40b293ZmoxCjJLM1FuMXFuNkJ2K29zNUx5cUowOUlSTXlid3IwUElCMS9FM0tKcVgrVlUvWHF5djNsdC9VZytyNXltM1BmVEIKQTAxdXkvZTBSSk8wUCtvSTVDaElXZnptdzBGcHhwVERPSkVqMk1LNjJDcWFDaDM4MnhpWVNhdVF4SWQ5T3dxVgpTRUovQVJEV1RxT2hrMUR3K2lqd3hGV21Lem1hRm02SlMreExoUTYramd1d0VDNUVKSEp1NWprUmlIMjZsTFFrCkFReGlFM2NoQlhGR0lpV0hJRXl3VnAxeHpsd3BRN3J3QVMvY0hodkM2MENDTWxKMmhQZktGbEJVR0JwdEcwTjUKKzFIdTRHNllYQzJnaXZYY2xvMHJ2eTUwbktnemR6alFxL0F4MWJwRjNXdnZkeVdxa2xSbS9ZYlUzUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  ---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "R0hPUTM0VW1Sekl2dGI2dQ=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch/templates/statefulset.yamld
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  #volumeClaimTemplates:
  #- metadata:
  #    name: elasticsearch-master
  #  spec:
  #    accessModes:
  #    - ReadWriteOnce
  #    resources:
  #      requests:
  #        storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "my-elasticsearch"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:

    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: elasticsearch-master-certs
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,"
          - name: node.roles
            value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.http.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.http.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.http.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
        volumeMounts:
          #- name: "elasticsearch-master"
          #  mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
